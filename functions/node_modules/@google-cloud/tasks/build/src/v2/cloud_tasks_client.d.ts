/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Cloud Tasks allows developers to manage the execution of background
 *  work in their applications.
 * @class
 * @memberof v2
 */
export declare class CloudTasksClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    cloudTasksStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudTasksClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a queue.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the queue. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.get_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_GetQueue_async
     */
    getQueue(request?: protos.google.cloud.tasks.v2.IGetQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.IGetQueueRequest | undefined,
        {} | undefined
    ]>;
    getQueue(request: protos.google.cloud.tasks.v2.IGetQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IGetQueueRequest | null | undefined, {} | null | undefined>): void;
    getQueue(request: protos.google.cloud.tasks.v2.IGetQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IGetQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a queue.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name in which the queue will be created.
     *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
     *
     *   The list of allowed locations can be obtained by calling Cloud
     *   Tasks' implementation of
     *   {@link google.cloud.location.Locations.ListLocations|ListLocations}.
     * @param {google.cloud.tasks.v2.Queue} request.queue
     *   Required. The queue to create.
     *
     *   {@link google.cloud.tasks.v2.Queue.name|Queue's name} cannot be the same as an existing queue.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.create_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_CreateQueue_async
     */
    createQueue(request?: protos.google.cloud.tasks.v2.ICreateQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.ICreateQueueRequest | undefined,
        {} | undefined
    ]>;
    createQueue(request: protos.google.cloud.tasks.v2.ICreateQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.ICreateQueueRequest | null | undefined, {} | null | undefined>): void;
    createQueue(request: protos.google.cloud.tasks.v2.ICreateQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.ICreateQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a queue.
     *
     * This method creates the queue if it does not exist and updates
     * the queue if it does exist.
     *
     * Queues created with this method allow tasks to live for a maximum of 31
     * days. After a task is 31 days old, the task will be deleted regardless of whether
     * it was dispatched or not.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.tasks.v2.Queue} request.queue
     *   Required. The queue to create or update.
     *
     *   The queue's {@link google.cloud.tasks.v2.Queue.name|name} must be specified.
     *
     *   Output only fields cannot be modified using UpdateQueue.
     *   Any value specified for an output only field will be ignored.
     *   The queue's {@link google.cloud.tasks.v2.Queue.name|name} cannot be changed.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   A mask used to specify which fields of the queue are being updated.
     *
     *   If empty, then all fields will be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.update_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_UpdateQueue_async
     */
    updateQueue(request?: protos.google.cloud.tasks.v2.IUpdateQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.IUpdateQueueRequest | undefined,
        {} | undefined
    ]>;
    updateQueue(request: protos.google.cloud.tasks.v2.IUpdateQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IUpdateQueueRequest | null | undefined, {} | null | undefined>): void;
    updateQueue(request: protos.google.cloud.tasks.v2.IUpdateQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IUpdateQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a queue.
     *
     * This command will delete the queue even if it has tasks in it.
     *
     * Note: If you delete a queue, a queue with the same name can't be created
     * for 7 days.
     *
     * WARNING: Using this method may have unintended side effects if you are
     * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
     * Read
     * [Overview of Queue Management and
     * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
     * this method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.delete_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_DeleteQueue_async
     */
    deleteQueue(request?: protos.google.cloud.tasks.v2.IDeleteQueueRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.tasks.v2.IDeleteQueueRequest | undefined,
        {} | undefined
    ]>;
    deleteQueue(request: protos.google.cloud.tasks.v2.IDeleteQueueRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.tasks.v2.IDeleteQueueRequest | null | undefined, {} | null | undefined>): void;
    deleteQueue(request: protos.google.cloud.tasks.v2.IDeleteQueueRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.tasks.v2.IDeleteQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Purges a queue by deleting all of its tasks.
     *
     * All tasks created before this method is called are permanently deleted.
     *
     * Purge operations can take up to one minute to take effect. Tasks
     * might be dispatched before the purge takes effect. A purge is irreversible.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.purge_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_PurgeQueue_async
     */
    purgeQueue(request?: protos.google.cloud.tasks.v2.IPurgeQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.IPurgeQueueRequest | undefined,
        {} | undefined
    ]>;
    purgeQueue(request: protos.google.cloud.tasks.v2.IPurgeQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IPurgeQueueRequest | null | undefined, {} | null | undefined>): void;
    purgeQueue(request: protos.google.cloud.tasks.v2.IPurgeQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IPurgeQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Pauses the queue.
     *
     * If a queue is paused then the system will stop dispatching tasks
     * until the queue is resumed via
     * {@link google.cloud.tasks.v2.CloudTasks.ResumeQueue|ResumeQueue}. Tasks can still be added
     * when the queue is paused. A queue is paused if its
     * {@link google.cloud.tasks.v2.Queue.state|state} is {@link google.cloud.tasks.v2.Queue.State.PAUSED|PAUSED}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.pause_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_PauseQueue_async
     */
    pauseQueue(request?: protos.google.cloud.tasks.v2.IPauseQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.IPauseQueueRequest | undefined,
        {} | undefined
    ]>;
    pauseQueue(request: protos.google.cloud.tasks.v2.IPauseQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IPauseQueueRequest | null | undefined, {} | null | undefined>): void;
    pauseQueue(request: protos.google.cloud.tasks.v2.IPauseQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IPauseQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Resume a queue.
     *
     * This method resumes a queue after it has been
     * {@link google.cloud.tasks.v2.Queue.State.PAUSED|PAUSED} or
     * {@link google.cloud.tasks.v2.Queue.State.DISABLED|DISABLED}. The state of a queue is stored
     * in the queue's {@link google.cloud.tasks.v2.Queue.state|state}; after calling this method it
     * will be set to {@link google.cloud.tasks.v2.Queue.State.RUNNING|RUNNING}.
     *
     * WARNING: Resuming many high-QPS queues at the same time can
     * lead to target overloading. If you are resuming high-QPS
     * queues, follow the 500/50/5 pattern described in
     * [Managing Cloud Tasks Scaling
     * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.resume_queue.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_ResumeQueue_async
     */
    resumeQueue(request?: protos.google.cloud.tasks.v2.IResumeQueueRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue,
        protos.google.cloud.tasks.v2.IResumeQueueRequest | undefined,
        {} | undefined
    ]>;
    resumeQueue(request: protos.google.cloud.tasks.v2.IResumeQueueRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IResumeQueueRequest | null | undefined, {} | null | undefined>): void;
    resumeQueue(request: protos.google.cloud.tasks.v2.IResumeQueueRequest, callback: Callback<protos.google.cloud.tasks.v2.IQueue, protos.google.cloud.tasks.v2.IResumeQueueRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the access control policy for a {@link google.cloud.tasks.v2.Queue|Queue}.
     * Returns an empty policy if the resource exists and does not have a policy
     * set.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * `cloudtasks.queues.getIamPolicy`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.get_iam_policy.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_GetIamPolicy_async
     */
    getIamPolicy(request?: protos.google.iam.v1.IGetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Sets the access control policy for a {@link google.cloud.tasks.v2.Queue|Queue}. Replaces any existing
     * policy.
     *
     * Note: The Cloud Console does not check queue-level IAM permissions yet.
     * Project-level permissions are required to use the Cloud Console.
     *
     * Authorization requires the following
     * [Google IAM](https://cloud.google.com/iam) permission on the specified
     * resource parent:
     *
     * * `cloudtasks.queues.setIamPolicy`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
     *   the fields in the mask will be modified. If no mask is provided, the
     *   following default mask is used:
     *
     *   `paths: "bindings, etag"`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.set_iam_policy.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_SetIamPolicy_async
     */
    setIamPolicy(request?: protos.google.iam.v1.ISetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns permissions that a caller has on a {@link google.cloud.tasks.v2.Queue|Queue}.
     * If the resource does not exist, this will return an empty set of
     * permissions, not a {@link google.rpc.Code.NOT_FOUND|NOT_FOUND} error.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.test_iam_permissions.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_TestIamPermissions_async
     */
    testIamPermissions(request?: protos.google.iam.v1.ITestIamPermissionsRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
        {} | undefined
    ]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a task.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The task name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2.Task}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.get_task.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_GetTask_async
     */
    getTask(request?: protos.google.cloud.tasks.v2.IGetTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.ITask,
        protos.google.cloud.tasks.v2.IGetTaskRequest | undefined,
        {} | undefined
    ]>;
    getTask(request: protos.google.cloud.tasks.v2.IGetTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    getTask(request: protos.google.cloud.tasks.v2.IGetTaskRequest, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a task and adds it to a queue.
     *
     * Tasks cannot be updated after creation; there is no UpdateTask command.
     *
     * * The maximum task size is 100KB.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     *
     *   The queue must already exist.
     * @param {google.cloud.tasks.v2.Task} request.task
     *   Required. The task to add.
     *
     *   Task names have the following format:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`.
     *   The user can optionally specify a task {@link google.cloud.tasks.v2.Task.name|name}. If a
     *   name is not specified then the system will generate a random
     *   unique task id, which will be set in the task returned in the
     *   {@link google.cloud.tasks.v2.Task.name|response}.
     *
     *   If {@link google.cloud.tasks.v2.Task.schedule_time|schedule_time} is not set or is in the
     *   past then Cloud Tasks will set it to the current time.
     *
     *   Task De-duplication:
     *
     *   Explicitly specifying a task ID enables task de-duplication.  If
     *   a task's ID is identical to that of an existing task or a task
     *   that was deleted or executed recently then the call will fail
     *   with {@link google.rpc.Code.ALREADY_EXISTS|ALREADY_EXISTS}.
     *   If the task's queue was created using Cloud Tasks, then another task with
     *   the same name can't be created for ~1hour after the original task was
     *   deleted or executed. If the task's queue was created using queue.yaml or
     *   queue.xml, then another task with the same name can't be created
     *   for ~9days after the original task was deleted or executed.
     *
     *   Because there is an extra lookup cost to identify duplicate task
     *   names, these {@link google.cloud.tasks.v2.CloudTasks.CreateTask|CreateTask} calls have significantly
     *   increased latency. Using hashed strings for the task id or for
     *   the prefix of the task id is recommended. Choosing task ids that
     *   are sequential or have sequential prefixes, for example using a
     *   timestamp, causes an increase in latency and error rates in all
     *   task commands. The infrastructure relies on an approximately
     *   uniform distribution of task ids to store and serve tasks
     *   efficiently.
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2.Task}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.create_task.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_CreateTask_async
     */
    createTask(request?: protos.google.cloud.tasks.v2.ICreateTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.ITask,
        protos.google.cloud.tasks.v2.ICreateTaskRequest | undefined,
        {} | undefined
    ]>;
    createTask(request: protos.google.cloud.tasks.v2.ICreateTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.ICreateTaskRequest | null | undefined, {} | null | undefined>): void;
    createTask(request: protos.google.cloud.tasks.v2.ICreateTaskRequest, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.ICreateTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a task.
     *
     * A task can be deleted if it is scheduled or dispatched. A task
     * cannot be deleted if it has executed successfully or permanently
     * failed.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The task name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.delete_task.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_DeleteTask_async
     */
    deleteTask(request?: protos.google.cloud.tasks.v2.IDeleteTaskRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.tasks.v2.IDeleteTaskRequest | undefined,
        {} | undefined
    ]>;
    deleteTask(request: protos.google.cloud.tasks.v2.IDeleteTaskRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.tasks.v2.IDeleteTaskRequest | null | undefined, {} | null | undefined>): void;
    deleteTask(request: protos.google.cloud.tasks.v2.IDeleteTaskRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.tasks.v2.IDeleteTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Forces a task to run now.
     *
     * When this method is called, Cloud Tasks will dispatch the task, even if
     * the task is already running, the queue has reached its {@link google.cloud.tasks.v2.RateLimits|RateLimits} or
     * is {@link google.cloud.tasks.v2.Queue.State.PAUSED|PAUSED}.
     *
     * This command is meant to be used for manual debugging. For
     * example, {@link google.cloud.tasks.v2.CloudTasks.RunTask|RunTask} can be used to retry a failed
     * task after a fix has been made or to manually force a task to be
     * dispatched now.
     *
     * The dispatched task is returned. That is, the task that is returned
     * contains the {@link Task.status|status} after the task is dispatched but
     * before the task is received by its target.
     *
     * If Cloud Tasks receives a successful response from the task's
     * target, then the task will be deleted; otherwise the task's
     * {@link google.cloud.tasks.v2.Task.schedule_time|schedule_time} will be reset to the time that
     * {@link google.cloud.tasks.v2.CloudTasks.RunTask|RunTask} was called plus the retry delay specified
     * in the queue's {@link google.cloud.tasks.v2.RetryConfig|RetryConfig}.
     *
     * {@link google.cloud.tasks.v2.CloudTasks.RunTask|RunTask} returns
     * {@link google.rpc.Code.NOT_FOUND|NOT_FOUND} when it is called on a
     * task that has already succeeded or permanently failed.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The task name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2.Task}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.run_task.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_RunTask_async
     */
    runTask(request?: protos.google.cloud.tasks.v2.IRunTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.ITask,
        protos.google.cloud.tasks.v2.IRunTaskRequest | undefined,
        {} | undefined
    ]>;
    runTask(request: protos.google.cloud.tasks.v2.IRunTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.IRunTaskRequest | null | undefined, {} | null | undefined>): void;
    runTask(request: protos.google.cloud.tasks.v2.IRunTaskRequest, callback: Callback<protos.google.cloud.tasks.v2.ITask, protos.google.cloud.tasks.v2.IRunTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists queues.
     *
     * Queues are returned in lexicographical order.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name.
     *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
     * @param {string} request.filter
     *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2.Queue|Queue}
     *   field can be used as a filter and several operators as supported.
     *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
     *   described in
     *   [Stackdriver's Advanced Logs
     *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
     *
     *   Sample filter "state: PAUSED".
     *
     *   Note that using filters might cause fewer queues than the
     *   requested page_size to be returned.
     * @param {number} request.pageSize
     *   Requested page size.
     *
     *   The maximum page size is 9800. If unspecified, the page size will
     *   be the maximum. Fewer queues than requested might be returned,
     *   even if more queues exist; use the
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} in the
     *   response to determine if more queues exist.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListQueues|ListQueues}
     *   method. It is an error to switch the value of the
     *   {@link google.cloud.tasks.v2.ListQueuesRequest.filter|filter} while iterating through pages.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Queue]{@link google.cloud.tasks.v2.Queue}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listQueuesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listQueues(request?: protos.google.cloud.tasks.v2.IListQueuesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.IQueue[],
        protos.google.cloud.tasks.v2.IListQueuesRequest | null,
        protos.google.cloud.tasks.v2.IListQueuesResponse
    ]>;
    listQueues(request: protos.google.cloud.tasks.v2.IListQueuesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.tasks.v2.IListQueuesRequest, protos.google.cloud.tasks.v2.IListQueuesResponse | null | undefined, protos.google.cloud.tasks.v2.IQueue>): void;
    listQueues(request: protos.google.cloud.tasks.v2.IListQueuesRequest, callback: PaginationCallback<protos.google.cloud.tasks.v2.IListQueuesRequest, protos.google.cloud.tasks.v2.IListQueuesResponse | null | undefined, protos.google.cloud.tasks.v2.IQueue>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name.
     *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
     * @param {string} request.filter
     *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2.Queue|Queue}
     *   field can be used as a filter and several operators as supported.
     *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
     *   described in
     *   [Stackdriver's Advanced Logs
     *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
     *
     *   Sample filter "state: PAUSED".
     *
     *   Note that using filters might cause fewer queues than the
     *   requested page_size to be returned.
     * @param {number} request.pageSize
     *   Requested page size.
     *
     *   The maximum page size is 9800. If unspecified, the page size will
     *   be the maximum. Fewer queues than requested might be returned,
     *   even if more queues exist; use the
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} in the
     *   response to determine if more queues exist.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListQueues|ListQueues}
     *   method. It is an error to switch the value of the
     *   {@link google.cloud.tasks.v2.ListQueuesRequest.filter|filter} while iterating through pages.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Queue]{@link google.cloud.tasks.v2.Queue} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listQueuesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listQueuesStream(request?: protos.google.cloud.tasks.v2.IListQueuesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listQueues`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location name.
     *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
     * @param {string} request.filter
     *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2.Queue|Queue}
     *   field can be used as a filter and several operators as supported.
     *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
     *   described in
     *   [Stackdriver's Advanced Logs
     *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
     *
     *   Sample filter "state: PAUSED".
     *
     *   Note that using filters might cause fewer queues than the
     *   requested page_size to be returned.
     * @param {number} request.pageSize
     *   Requested page size.
     *
     *   The maximum page size is 9800. If unspecified, the page size will
     *   be the maximum. Fewer queues than requested might be returned,
     *   even if more queues exist; use the
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} in the
     *   response to determine if more queues exist.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListQueuesResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListQueues|ListQueues}
     *   method. It is an error to switch the value of the
     *   {@link google.cloud.tasks.v2.ListQueuesRequest.filter|filter} while iterating through pages.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Queue]{@link google.cloud.tasks.v2.Queue}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.list_queues.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_ListQueues_async
     */
    listQueuesAsync(request?: protos.google.cloud.tasks.v2.IListQueuesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.tasks.v2.IQueue>;
    /**
     * Lists the tasks in a queue.
     *
     * By default, only the {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC} view is retrieved
     * due to performance considerations;
     * {@link google.cloud.tasks.v2.ListTasksRequest.response_view|response_view} controls the
     * subset of information which is returned.
     *
     * The tasks may be returned in any order. The ordering may change at any
     * time.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {number} request.pageSize
     *   Maximum page size.
     *
     *   Fewer tasks than requested might be returned, even if more tasks exist; use
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} in the response to
     *   determine if more tasks exist.
     *
     *   The maximum page size is 1000. If unspecified, the page size will be the
     *   maximum.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListTasks|ListTasks}
     *   method.
     *
     *   The page token is valid for only 2 hours.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Task]{@link google.cloud.tasks.v2.Task}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTasks(request?: protos.google.cloud.tasks.v2.IListTasksRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tasks.v2.ITask[],
        protos.google.cloud.tasks.v2.IListTasksRequest | null,
        protos.google.cloud.tasks.v2.IListTasksResponse
    ]>;
    listTasks(request: protos.google.cloud.tasks.v2.IListTasksRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.tasks.v2.IListTasksRequest, protos.google.cloud.tasks.v2.IListTasksResponse | null | undefined, protos.google.cloud.tasks.v2.ITask>): void;
    listTasks(request: protos.google.cloud.tasks.v2.IListTasksRequest, callback: PaginationCallback<protos.google.cloud.tasks.v2.IListTasksRequest, protos.google.cloud.tasks.v2.IListTasksResponse | null | undefined, protos.google.cloud.tasks.v2.ITask>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {number} request.pageSize
     *   Maximum page size.
     *
     *   Fewer tasks than requested might be returned, even if more tasks exist; use
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} in the response to
     *   determine if more tasks exist.
     *
     *   The maximum page size is 1000. If unspecified, the page size will be the
     *   maximum.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListTasks|ListTasks}
     *   method.
     *
     *   The page token is valid for only 2 hours.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Task]{@link google.cloud.tasks.v2.Task} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTasksStream(request?: protos.google.cloud.tasks.v2.IListTasksRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTasks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The queue name. For example:
     *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
     * @param {google.cloud.tasks.v2.Task.View} request.responseView
     *   The response_view specifies which subset of the {@link google.cloud.tasks.v2.Task|Task} will be
     *   returned.
     *
     *   By default response_view is {@link google.cloud.tasks.v2.Task.View.BASIC|BASIC}; not all
     *   information is retrieved by default because some data, such as
     *   payloads, might be desirable to return only when needed because
     *   of its large size or because of the sensitivity of data that it
     *   contains.
     *
     *   Authorization for {@link google.cloud.tasks.v2.Task.View.FULL|FULL} requires
     *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
     *   permission on the {@link google.cloud.tasks.v2.Task|Task} resource.
     * @param {number} request.pageSize
     *   Maximum page size.
     *
     *   Fewer tasks than requested might be returned, even if more tasks exist; use
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} in the response to
     *   determine if more tasks exist.
     *
     *   The maximum page size is 1000. If unspecified, the page size will be the
     *   maximum.
     * @param {string} request.pageToken
     *   A token identifying the page of results to return.
     *
     *   To request the first page results, page_token must be empty. To
     *   request the next page of results, page_token must be the value of
     *   {@link google.cloud.tasks.v2.ListTasksResponse.next_page_token|next_page_token} returned
     *   from the previous call to {@link google.cloud.tasks.v2.CloudTasks.ListTasks|ListTasks}
     *   method.
     *
     *   The page token is valid for only 2 hours.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Task]{@link google.cloud.tasks.v2.Task}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/cloud_tasks.list_tasks.js</caption>
     * region_tag:cloudtasks_v2_generated_CloudTasks_ListTasks_async
     */
    listTasksAsync(request?: protos.google.cloud.tasks.v2.IListTasksRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.tasks.v2.ITask>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified queue resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} queue
     * @returns {string} Resource name string.
     */
    queuePath(project: string, location: string, queue: string): string;
    /**
     * Parse the project from Queue resource.
     *
     * @param {string} queueName
     *   A fully-qualified path representing Queue resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromQueueName(queueName: string): string | number;
    /**
     * Parse the location from Queue resource.
     *
     * @param {string} queueName
     *   A fully-qualified path representing Queue resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromQueueName(queueName: string): string | number;
    /**
     * Parse the queue from Queue resource.
     *
     * @param {string} queueName
     *   A fully-qualified path representing Queue resource.
     * @returns {string} A string representing the queue.
     */
    matchQueueFromQueueName(queueName: string): string | number;
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} queue
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project: string, location: string, queue: string, task: string): string;
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName: string): string | number;
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName: string): string | number;
    /**
     * Parse the queue from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the queue.
     */
    matchQueueFromTaskName(taskName: string): string | number;
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
